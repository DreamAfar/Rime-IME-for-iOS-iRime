patch:
  # "一级设置项/二级设置项/三级设置项": 新的设置值
  # "另一个设置项": 新的设置值
  # "再一个设置项": 新的设置值
  # "含列表的设置项/@0": 列表第一个元素新的设置值
  # "含列表的设置项/@last": 列表最后一个元素新的设置值
  # "含列表的设置项/@before 0": 在列表第一个元素之前插入新的设置值（不建议在补丁中使用）
  # "含列表的设置项/@after last": 在列表最后一个元素之后插入新的设置值（不建议在补丁中使用）
  # "含列表的设置项/@next": 在列表最后一个元素之后插入新的设置值（不建议在补丁中使用）
  # engine/filters/@next:    其中@next表示添加一个新的选项，排在已有的选项后面，@next1表示@next后面第二个，以此类推排序

  # # __include: easy_en:/patch_Qiao_flypy
  # # 加載 easy_en 依賴
  # "schema/dependencies/@next": easy_en
  # # 載入翻譯英文的碼表翻譯器，取名爲 english
  # "engine/translators/@next": table_translator@english
  # # english 翻譯器的設定項
  # english:
  #   dictionary: Qiao_cn_en2  #easy_en
  #   spelling_hints: 1
  #   enable_completion: false
  #   enable_sentence: false
  #   initial_quality: 1

  schema/dependencies/@next:  #依赖文件
    core   #添加core.schema.yaml， 调用lua精准过滤生僻字
  schema/dependencies/@next1:  #依赖文件
    easy_en   #添加easy_en.schema英语方案

  # 增加切换选单
  switches/@next:
    name: emoji_suggestion
    reset: 0
    states: [ "😭️", "😄️" ]
  switches/@next1:
    name: symbol_support
    reset: 1
    states: [ "无符", "符" ]
  switches/@next2:
    name: extended_char             # lua精准过滤生僻字，控制开关
    reset: 1                        #默认1，常用
    states: ["超集", "常用"]
    # name: extended_charset             # 过滤生僻字，控制开关
    # reset: 0                        #默认0，常用
    # states: ["通用", "增广"]
  switches/@next3:
    name: English             # 简单的English互译滤镜
    reset: 0                        #默认1，常用
    states: ["EN_关", "EN_开"]

  # filters滤镜

  # lua精准过滤，必须放到engine/filters:滤镜第一行，这里用"@before 0"在列表第一个元素之前插入新的设置值
  engine/filters/@before 0: "lua_filter@core"       

  # # 添加 嵌入式编码lua
  # engine/filters/@next1: "lua_filter@preedit_preview"
  
  # 添加 symbol 滤镜
  engine/filters/@next2: "simplifier@symbol_support"

  # # 添加 简单的English互译滤镜
  engine/filters/@next3: "simplifier@English"

  # 添加 emoji 滤镜
  engine/filters/@next4: "simplifier@emoji_suggestion"

  # # 添加 候选项重排序，使单字优先
  engine/filters/@next5: "lua_filter@single_char_filter"

  # 自造词Lua2
  # engine/filters/@next6: "lua_filter@user_dictionary"
  # engine/filters/@next6: "lua_filter@en_cn_filter"

  # processors
  # 添加 以词定句
  # engine/processors/@before 0: "lua_processor@select_character_processor"

  # engine/processors/@before 0": lua_processor@en_cn_processor

  # translators
  # 添加 调用custom_phrase自定义短语
  engine/translators/@next1: "table_translator@custom_phrase"

  # # 添加 调用Rime-lua插件，自定义系统变量输出日期、星期、时间类型输出
  engine/translators/@next2: "lua_translator@date_translator"

  # 添加 简易计算器lua，按符号"="激活计算器
  engine/translators/@next3: "lua_translator@calculator_translator"
  recognizer/patterns/expression: "^=.*$"

  # 自造词Lua
  # "engine/translators/@next4": lua_translator@user_dictionary

  # 添加 调用easy_en英文输入法
  # __include: easy_en:/patch  ##注意：__include加载会和/@next冲突，解决方法1:禁用/@next，使用/@next2开始；方法2:用下面的easy_en英文输入法2，添加相应配置
  # engine/translators/@next: "table_translator@easy_en"
  engine/translators/@next: "table_translator@easy_en"
  # easy_en/initial_quality: 0  #easy_en 对此项的默认设置为 -1，你可以尝试 0 到 0.5 左右的数值。数值越大，英文单词出现的就越靠前。

  # engine/processors/@before 1: lua_processor@history_processor


  #emoji表情
  emoji_suggestion:
    opencc_config: emoji.json
    option_name: emoji_suggestion
    tips: all

  # easy_en英文输入法2
  easy_en:
    comment_format:
      - "xform/^.+$//"
    dictionary: easy_en.extended
    enable_completion: true
    enable_sentence: false
    spelling_hints: 9

  # melt_eng:
  #   dictionary: melt_eng
  #   spelling_hints: 9
    # enable_completion: true # 关闭后英文不会有提示，只会在打全时才会显示，体验不是很好
    # enable_sentence: false
    # initial_quality 
    # 设置为 1 或 大于 1 时，英语与中文将拥有同样的权重，在输入单个文字时，如「a」「de」，大量的英文单词会冲到汉字前面，造成选取困难。
    # 设置为 0 或负数时，同时会有单编码时被英文占据第一候选项的问题，建议在 custom_phrase 中设置单编码固顶字来解决这个问题
    # 设置为 0 的另外一个问题：如「internet」，直到输入完成，该单词才变为第一候选项（「interne」时的结果是「一奈特人」）
    # 不过总的来说，还是设置为 0 比较合适。
    # initial_quality: -1 # -3
  # 令英文输入方案响应大写字母（ Shift + [a-z] ）
  # speller/alphabet: zyxwvutsrqponmlkjihgfedcbaZYXWVUTSRQPONMLKJIHGFEDCBA


  #简单的English互译滤镜
  English:
    opencc_config: English.json
    option_name: English
    tips: all

  #symbol符号
  symbol_support:
    opencc_config: symbol.json
    option_name: symbol_support
    tips: all

  # 自定义短语 Custom_phrase.txt # Tab 不能用空格代替
  custom_phrase:
    dictionary: ""
    user_dict: custom_phrase     #设定用户词典名
    db_class: stabledb           #设定用户词典类型，可设 tabledb〔文本〕或 userdb〔二进制〕
    enable_completion: false     #提前显示尚未输入完整码的字〔true 或 false〕
    enable_sentence: false       #是否开启自动造句〔true 或 false〕
    initial_quality: 1           #设定此翻译器结果优先级，如果想要自定义的词排在前面，这个值尽量设大一点


  # translator
  translator/dictionary: Qiao.extended            #載入拼音擴充詞庫
  translator/prism: Qiao_flypy
  translator/db_class: userdb                      # 設定用戶詞典類型，可設〔文本〕或〔二進制〕tabledb userdb
  # translator/spelling_hints: 4                   # 設定多少字以內候選標註完整帶調拼音〔僅script_translator有效〕
  # translator/enable_completion: true               # 是否显示编码未输入完整的词条
  translator/enable_sentence: false                # 是否开启自动造句
  translator/enable_user_dict: true                # 是否开启用户词典（用户词典记录动态字词频，用户词）
  # translator/encode_commit_history: true           # 是否对已上屏词自动成词（仅 table_translator 有效）
  # translator/disable_user_dict_for_patterns: false  # 禁止某些編碼錄入用戶詞典
  # translator/disable_user_dict_for_patterns:   # 不需要录入用户词典的编码
  # - ^[a-z]$
  # - ^[a-y]{1,2}$

  #双拼不自动显示全拼字母
  'translator/preedit_format': {}

  # speller/max_code_length: 4                      # 最长 4 码  注意：码长太短会导致easy_en英文长度提前无法完整输入
  # speller/auto_select: true                       # 顶字自动上屏
  # speller/auto_select_unique_candidate: true      # 无重码自动上屏
  # speller/auto_clear: max_length                  # 空码时自动清空
  speller/db_class: tabledb
  speller/contextual_suggestions: true  #是否使用八股文简化字语言模型，优化长句输入〔需配合grammar使用〕
  speller/max_homophones: 7  #最大同音簇长度【需配合grammar使用】

  # 增加八股文简化字语言模型，优化长句输入
  grammar/language: zh-hans-t-essay-bgw  #自定义

  # 自定义符号上屏
  punctuator:
    import_preset: symbols
    symbols:
      "/fs": [½, ‰, ¼, ⅓, ⅔, ¾, ⅒ ]
      "/bq": [😂️, 😅️, ☺️, 😱️, 😭️, 😇️, 🙃️, 🤔️, 💊️, 💯️, 👍️, 🙈️, 💩️, 😈️ ]
      "/dn": [⌘, ⌥, ⇧, ⌃, ⎋, ⇪, , ⌫, ⌦, ↩︎, ⏎, ↑, ↓, ←, →, ↖, ↘, ⇟, ⇞]
      "/fh": [ ©, ®, ℗, ⓘ, ℠, ™, ℡, ␡, ♂, ♀, ☉, ☊, ☋, ☌, ☍, ☐, ☑︎, ☒, ☜, ☝, ☞, ☟, ✎, ✄, ♻, ⚐, ⚑, ⚠]
      "/xh": [ ＊, ×, ✱, ★, ☆, ✩, ✧, ❋, ❊, ❉, ❈, ❅, ✿, ✲]
    full_shape: #全角符号
      "`": "｀"
      "~": "～"
      "!": "！"
      "@": "＠"
      "#": "＃"
      "$": "￥"
      "%": "％"
      "^": "……"
      "&": "＆"
      "*": "*"
      "(": "（"
      ")": "）"
      "_": "—"
      "+": "＋"
      "-": "－"
      "=": "＝"
      "[": "【"
      "]": "】"
      "{": "｛"
      "}": "｝"
      "|": "｜"
      "\\": "、"
      "/": [ ／, ÷ ]
      ";": "；"
      "'": "‘"
      ",": "，"
      ".": "。"
      "<": "《"
      ">": "》"
      "?": "？"
    half_shape: #半角符号
      "`": "·"
      "~": "～"
      "!": "！"
      "@": "@"
      "#": "#"
      "$": "￥"
      "%": "%"
      "^": "……"
      "&": "&"
      "*": "*"
      "(": "（"
      ")": "）"
      "_": "—"
      "+": "+"
      "-": "-"
      "=": "="
      "[": "【"
      "]": "】"
      "{": "｛"
      "}": "｝"
      "|": "｜"
      "\\": "、"
      "/": [ ／, ÷ ]
      ";": "；"
      "'": "’"
      ",": "，"
      ".": "。"
      "<": "《"
      ">": "》"
      "?": "？"

  "key_binder/bindings": # 设置哪些键可以翻页，需要哪个取消注释即可
    # 自定义
    # - {accept: "~", send: "Shift+Right", when: has_menu}  #手机上用
    # - {accept: "'", send: "Shift+Delete", when: has_menu}  #手机上用
    # - { when: has_menu, accept: "_", toggle: English } # 手机上用：在输入过程中，切换English滤镜开关的快捷键，这里用_号切换
    # - { when: has_menu, accept: "#", toggle: emoji_suggestion } # 手机上用：在输入过程中，切换Emoji开关的快捷键，这里用#号切换
    # - {accept: "^", send: "Down", when: has_menu}
    - { when: has_menu, accept: "F6", toggle: emoji_suggestion } # window10在输入过程中，用F6快捷键，切换Emoji开关
    - { when: has_menu, accept: "F7", toggle: English } # window10在输入过程中，用F6快捷键，切换English开关
