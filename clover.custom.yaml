# Rime schema
# encoding: utf-8
#这是输入方案修改定制文件

patch:   
  schema/dependencies/@next:  #依赖文件
    core   #添加core.schema.yaml， 调用lua精准过滤生僻字

  switches/@next1:
    name: extended_char             # lua精准过滤生僻字，控制开关
    reset: 1                        #默认1，常用
    states: ["超集", "常用"]
  
  #3 lua精准过滤，必须放到engine/filters:滤镜第一行，这里用"@before 0"在列表第一个元素之前插入新的设置值
  engine/filters/@before 0: "lua_filter@core"    

  # processors
  # 添加 以词定句
  engine/processors/@next: "lua_processor@select_character_processor"

  # translators
  # 添加 调用custom_phrase自定义短语
  engine/translators/@next: "table_translator@custom_phrase"

  # 添加 调用Rime-lua插件，自定义系统变量输出日期、星期、时间类型输出
  engine/translators/@next1: "lua_translator@date_translator"

  # 添加 简易计算器lua，按符号"="激活计算器
  engine/translators/@next2: "lua_translator@calculator_translator"
  recognizer/patterns/expression: "^=.*$"

  # # #載入擴充詞庫
  # 'translator/dictionary': Qiao.extended

  # 自定义短语 Custom_phrase.txt # Tab 不能用空格代替
  custom_phrase:
    dictionary: ""
    user_dict: custom_phrase     #设定用户词典名
    db_class: stabledb           #设定用户词典类型，可设 tabledb〔文本〕或 userdb〔二进制〕
    enable_completion: false     #提前显示尚未输入完整码的字〔true 或 false〕
    enable_sentence: false       #是否开启自动造句〔true 或 false〕
    initial_quality: 1           #设定此翻译器结果优先级，如果想要自定义的词排在前面，这个值尽量设大一点
   

  # 自定义符号上屏
  punctuator:
    import_preset: symbols
    symbols:
      "/fs": [½, ‰, ¼, ⅓, ⅔, ¾, ⅒ ]
      "/bq": [😂️, 😅️, ☺️, 😱️, 😭️, 😇️, 🙃️, 🤔️, 💊️, 💯️, 👍️, 🙈️, 💩️, 😈️ ]
      "/dn": [⌘, ⌥, ⇧, ⌃, ⎋, ⇪, , ⌫, ⌦, ↩︎, ⏎, ↑, ↓, ←, →, ↖, ↘, ⇟, ⇞]
      "/fh": [ ©, ®, ℗, ⓘ, ℠, ™, ℡, ␡, ♂, ♀, ☉, ☊, ☋, ☌, ☍, ☐, ☑︎, ☒, ☜, ☝, ☞, ☟, ✎, ✄, ♻, ⚐, ⚑, ⚠]
      "/xh": [ ＊, ×, ✱, ★, ☆, ✩, ✧, ❋, ❊, ❉, ❈, ❅, ✿, ✲]
    full_shape:
      "`": "｀"
      "~": "～"
      "!": "！"
      "@": "＠"
      "#": "＃"
      "$": "￥"
      "%": "％"
      "^": "……"
      "&": "＆"
      "*": "*"
      "(": "（"
      ")": "）"
      "_": "——"
      "+": "＋"
      "-": "－"
      "=": "＝"
      "[": "【"
      "]": "】"
      "{": "｛"
      "}": "｝"
      "|": "｜"
      "\\": "、"
      "/": [ ／, ÷ ]
      ";": "；"
      "'": "‘"
      ",": "，"
      ".": "。"
      "<": "《"
      ">": "》"
      "?": "？"
    half_shape:
      "`": "·"
      "~": "～"
      "!": "！"
      "@": "@"
      "#": "#"
      "$": "￥"
      "%": "%"
      "^": "……"
      "&": "&"
      "*": "*"
      "(": "（"
      ")": "）"
      "_": "——"
      "+": "+"
      "-": "-"
      "=": "="
      "[": "【"
      "]": "】"
      "{": "｛"
      "}": "｝"
      "|": "｜"
      "\\": "、"
      "/": [ ／, ÷ ]
      ";": "；"
      "'": "’"
      ",": "，"
      ".": "。"
      "<": "《"
      ">": "》"
      "?": "？"

  recognizer/patterns/punct: "^/([0-9]0?|[A-Za-z]+)$"
  
  # easy_en英文输入
  # __include: easy_en:/patch
  # easy_en/enable_sentence: false

  "key_binder/bindings": # 设置哪些键可以翻页，需要哪个取消注释即可
    # 自定义
    - { when: has_menu, accept: "#", toggle: emoji_suggestion } # 在输入过程中，切换Emoji开关的快捷键，这里用#号切换
    - { when: has_menu, accept: "F6", toggle: emoji_suggestion } # window10在输入过程中，用F6快捷键，切换Emoji开关
    # - { when: has_menu, accept: "_", toggle: English } # 在输入过程中，切换English滤镜开关的快捷键，这里用_号切换
    # - { when: has_menu, accept: "F7", toggle: English } # window10在输入过程中，用F6快捷键，切换English开关
